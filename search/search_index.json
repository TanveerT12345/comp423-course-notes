{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Tanveer's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Tanveer Thethi</li> <li>Reviewer: Abhiraam Aremanda</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites \ud83d\udee0\ufe0f","text":"<p>Before starting, ensure you have the following installed:</p> <ul> <li>\ud83d\udc33 Docker</li> <li>\ud83d\udda5\ufe0f Visual Studio Code with the Dev Containers extension</li> <li>\ud83d\udcc2 Git</li> </ul> <p>Note</p> <p>For more information about installing Docker, refer to the Docker Documentation.</p>"},{"location":"tutorials/rust-setup/#step-1-initialize-a-git-repository","title":"Step 1: Initialize a Git Repository \ud83d\udd27","text":"<p>Start by creating a directory for your project and initializing a Git repository:</p> Command Description <code>mkdir rust-setup</code> Creates a directory named <code>rust-setup</code>. <code>cd rust-setup</code> Navigates to the new directory. <code>git init</code> Initializes a Git repository in the current folder. <p>Run the following commands in your terminal:</p> <pre><code>mkdir rust-setup\ncd rust-setup\ngit init\n</code></pre>"},{"location":"tutorials/rust-setup/#step-2-configure-the-dev-container","title":"Step 2: Configure the Dev Container \ud83d\udce6","text":"<ol> <li> <p>Create a Create a .devcontainer directory:</p> <pre><code>mkdir .devcontainer\n</code></pre> </li> <li> <p>Add the following devcontainer.json file to the .devcontainer folder:</p> <pre><code>{  \n    \"name\": \"Rust Dev Container\",  \n    \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",  \n    \"customizations\": {  \n        \"vscode\": {  \n            \"extensions\": [\"rust-lang.rust-analyzer\"]  \n        }  \n    }  \n}\n</code></pre> </li> </ol> <p>Info</p> <p>The rust-lang.rust-analyzer extension is officially maintained by the Rust team. It provides tools like syntax highlighting, autocompletion, and error checking.</p>"},{"location":"tutorials/rust-setup/#step-3-verify-rust-installation","title":"Step 3: Verify Rust Installation \ud83d\udc39","text":"<p>Once the Dev Container is up and running, check the installed Rust version:</p> <p>Run in your terminal:</p> <pre><code>rustc --version\n</code></pre> <p>You should see output similar to:</p> <pre><code>rustc 1.71.0 (abcd1234 2024-01-01)\n</code></pre> <p>Note</p> <p>Using the Microsoft Rust Dev Container base image ensures you're running the latest stable version of Rust.</p>"},{"location":"tutorials/rust-setup/#step-4-create-the-hello-423-program","title":"Step 4: Create the Hello 423 Program \u2728","text":"<p>Now its time to create your first Rust program</p> <ol> <li> <p>Initialize the Rust Project:</p> <pre><code>cargo new hello_comp423  \ncd hello_comp423\n</code></pre> </li> <li> <p>Directory structure similar to below will be created:</p> <pre><code>hello_comp423/  \n\u251c\u2500\u2500 Cargo.toml  \n\u2514\u2500\u2500 src/  \n    \u2514\u2500\u2500 main.rs\n</code></pre> </li> <li> <p>Modify the main.rs File</p> <pre><code>fn main() {  \n    println!(\"Hello COMP423\");  \n}\n</code></pre> </li> </ol>"},{"location":"tutorials/rust-setup/#step-5-compile-and-run-the-program","title":"Step 5: Compile and Run the Program \ud83d\ude80","text":"<ol> <li> <p>To compile the program into an executable, use the cargo build command::</p> <pre><code>cargo build\n</code></pre> <p>This creates a compiled binary in the target/debug/ directory. Run the following command to execute it:</p> <pre><code>./target/debug/hello_comp423\n</code></pre> <p>Output:</p> <pre><code>Hello COMP423\n</code></pre> </li> </ol> <p>Note</p> <p>Think of cargo build like the gcc command in COMP211. It compiles your code but doesn't run it automatically.</p>"},{"location":"tutorials/rust-setup/#step-6-verify-and-push","title":"Step 6: Verify and Push \ud83d\udcdd","text":"<ol> <li> <p>Verify the program runs correctly.</p> </li> <li> <p>Push your repository to GitHub:</p> <pre><code>git add .  \ngit commit -m \"Initial Rust setup\"  \ngit branch -M main  \ngit remote add origin &lt;your-repo-url&gt;  \ngit push -u origin main\n</code></pre> </li> </ol>"},{"location":"tutorials/rust-setup/#links-to-additional-resources","title":"Links to Additional Resources \ud83d\udd17","text":"<ul> <li>Rust Documentation</li> <li>MkDocs Documentation</li> </ul>"}]}